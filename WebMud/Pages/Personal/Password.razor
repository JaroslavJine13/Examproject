@*@page "/personal/account/password"*@
@inject ISnackbar Snackbar
@inject WebMud.Data.IUsersService UsersService
@using System.Text.RegularExpressions
@using WebMud.Data
@attribute [Authorize(Roles = "Admin, User")]
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@using System.Threading;
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations;

<EditForm Model="_passModel" OnValidSubmit="PassSubmit" OnInvalidSubmit="PassInvalidSubmit" Context="Contexty">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Change Password</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="New Password" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="_passModel.Pass" Required="true" RequiredError="Password is required!" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Password Confirmation" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="_passModel.Password2" For="(() => _passModel.Password2)" Validation="@(new Func<string, string>(PasswordMatch))" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Old Password" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="_passModel.CurrentPassword" Required="true" />
                </MudItem>
            </MudGrid>
            <MudText Color="@Color.Error">
                <ValidationSummary />
            </MudText>
        </MudCardContent>
        <MudCardActions Class="pb-4 pl-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Change Password</MudButton>
        </MudCardActions>
    </MudCard>

</EditForm>


@code {

    private class PassModel
    {

        //Password model pro změnu hesla
        [Required(ErrorMessage = "Password is required.")]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-,.]).{8,}$", ErrorMessage = "Password must contain one cap. letter, one lowercase letter, at least one digit and special char.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Pass { get; set; }
        [StringLength(255)]
        [Required(ErrorMessage = "Password is required.")]
        [Compare(nameof(Pass), ErrorMessage = "Passwords does not match.")]
        public string Password2 { get; set; }
        public string CurrentPassword { get; set; }
        //

    }

    private PassModel _passModel { get; set; }

    private System.Security.Claims.ClaimsPrincipal Authuser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        Authuser = authstate.User;


        if (Authuser.Identity.IsAuthenticated)
        {

            _passModel = new PassModel();


        }
        else
        {



        }
    }

    private async Task PassSubmit()
    {

        var user = await UsersService.GetUsers(new Guid(Authuser.Claims.First().Value));


        if (user.Password == _passModel.CurrentPassword)
        {

            await UsersService.UpdatePass(_passModel.Pass, Authuser.Identity.Name);
            _passModel = new PassModel();
            StateHasChanged();

            SnackbarOn("Changed!", Defaults.Classes.Position.BottomStart, Severity.Success);


        }
        else
        {

            SnackbarOn("Old password is wrong!", Defaults.Classes.Position.BottomStart, Severity.Error);
        }



    }

    private async Task PassInvalidSubmit()
    {
        SnackbarOn("Vyplňte prosím správně formulář!", Defaults.Classes.Position.BottomStart, Severity.Error);
        StateHasChanged();

    }


    private string PasswordMatch(string arg)
    {
        if (_passModel.Pass != arg)
            return "Passwords don't match";
        return null;
    }

    MudTextField<string> pwField1;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";


    }
    void SnackbarOn(string message, string position, Severity sev)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Add(message, sev);
    }
}

