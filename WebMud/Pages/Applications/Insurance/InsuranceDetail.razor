@page "/application/insurance/{Id}"
@inject WebMud.Data.IInsuranceService InsuranceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using WebMud.Models
@using WebMud.Data
@inject IWebHostEnvironment Environment
@attribute [Authorize(Roles = "Admin, User")]
@inject IClientService ClientService


@if (_Insurance is null || _Client is null)
{
    <MudItem xs="12" sm="7">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </MudItem>
}
else
{


    <EditForm Model="@_Insurance" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        <DataAnnotationsValidator />
        <MudGrid>

            <MudItem xs="12" sm="7">

                <MudPaper Class="pa-2">
                    @*          <MudButton Class="ml-n1" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@Back">Back</MudButton>*@
                    <MudIconButton Icon="@Icons.Filled.ArrowBackIosNew" Color="Color.Secondary" OnClick="@Back"></MudIconButton>
                </MudPaper>
                <MudCard>
                    <MudCardContent>
                        @*<MudTextField Label="Id" Disabled="true" @bind-Value="_JobOffers.Id" For="@(() => _JobOffers.Id)" />*@
                        <MudDatePicker Label="Date" HelperText="xy" Editable="true" @bind-Date="_Insurance.CreatedDate" Variant="Variant.Outlined"   HelperTextOnFocus="true" Required="true" Disabled="true" />

                        <MudTextField Label="Subject" HelperText="Name of picture. Max. 1000 characters" @bind-Value="_Insurance.Subject" MaxLength="1000" For="@(() => _Insurance.Subject)" Required="true" HelperTextOnFocus="true" Variant="Variant.Outlined" />

                        <MudNumericField Label="Price" Variant="Variant.Outlined" MaxLength="10" @bind-Value="_Insurance.Price" Immediate="true"  TextChanged="(() => Round())" Required="true" HelperText="Full price" HelperTextOnFocus="true" />



                        <MudDatePicker Label="Date from" Editable="true" @bind-Date="_Insurance.DateFrom" Variant="Variant.Outlined" HelperText="pick a date" HelperTextOnFocus="true" Required="true"/>
                        <MudDatePicker Label="Date to" Editable="true" @bind-Date="_Insurance.DateTo" Variant="Variant.Outlined" HelperText="pick a date" HelperTextOnFocus="true" Required="true"/>

                        <MudItem xs="12" md="8">
                            <MudSelect @bind-Value="@_Insurance.TypeEnum" MultiSelection="false" Label="Insurance Type" Variant="Variant.Outlined" HelperText="Type of insurance" HelperTextOnFocus="true" AnchorOrigin="Origin.BottomCenter" Required="true" Text="No assign">


                                <MudSelectItem Value="@WebMud.Models.Type.Liability">Liability ins. </MudSelectItem>
                                <MudSelectItem Value="@WebMud.Models.Type.Car">Car ins. </MudSelectItem>
                                <MudSelectItem Value="@WebMud.Models.Type.life">Life ins. </MudSelectItem>
                                <MudSelectItem Value="@WebMud.Models.Type.House">House ins. </MudSelectItem>
                            </MudSelect>
                        </MudItem>


                        <MudItem xs="12" md="8">
                            <MudSelect T="string" @bind-Value="@_Insurance.ClientLink" MultiSelection="false" Label="Client" Variant="Variant.Outlined" HelperText="Pick a client" HelperTextOnFocus="true" AnchorOrigin="Origin.BottomCenter" Required="true" Text="No assign">

                                @foreach (var fol in _Client)
                                {

                                    <MudSelectItem Value="@fol.Id.ToString()">@(fol.Name + " " + fol.Surname) </MudSelectItem>
                                }

                            </MudSelect>
                        </MudItem>


                        <MudCheckBox T="bool" Class="ml-n2" Label="Is Active" @bind-Checked="_Insurance.IsActive" For="@(() => _Insurance.IsActive)" />


                        <MudCardActions Class="d-flex justify-center">



                        </MudCardActions>
                    </MudCardContent>
                    <MudCardActions>


                        <MudButton Disabled="_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Working</MudText>
                            }
                            else
                            {
                                <MudText>Confirm</MudText>
                            }
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                    @if (success)
                    {
                        <MudText Color="Color.Success">Success</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Fill out the form correctly to see the success message.
                </MudText>
            </MudItem>
        </MudGrid>
    </EditForm>




    <style>


        .ql-toolbar .ql-stroke {
            fill: none;
            stroke: #A1A1A1;
        }

        .ql-toolbar .ql-fill {
            fill: #A1A1A1;
            stroke: none;
        }

        .ql-toolbar .ql-picker {
            color: #A1A1A1;
        }
    </style>



}

@code
{
    [Parameter]
    public string Id { get; set; }

    private Insurance _Insurance { get; set; }
    private List<WebMud.Models.Client>? _Client { get; set; }
    bool success = false;
    private bool _processing = false;
    private bool _Disabled = false;


    protected override async Task OnInitializedAsync()
    {
        bool isValid = Guid.TryParse(Id, out Guid result);


        if (!string.IsNullOrEmpty(Id) & Id == "0")
        {
            _Insurance = new Insurance();
            _Disabled = true;
            _Client = await ClientService.GetClientAll();

            _Insurance.CreatedDate = DateTime.Now;
            StateHasChanged();
        }
        else
        {
            if (!isValid)
            {

                Navigation.NavigateTo("/application/Insurance");

            }
            else
            {



                _Insurance = await InsuranceService.GetInsurance(Guid.Parse(Id));


                _Client = await ClientService.GetClientAll();
            }


        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


    }


    private async Task OnValidSubmit()
    {

        _processing = true;
        await Task.Delay(1);


        if (_Insurance.Id == Guid.Empty)
        {


            await InsuranceService.AddInsurance(_Insurance);

            success = true;

        }
        else
        {

            await InsuranceService.UpdateInsurance(_Insurance);

            success = true;


        }

        _processing = false;

        StateHasChanged();
    }

    private async Task Round()
    {

        _Insurance.Price = Math.Round(_Insurance.Price, 2);


        }


    private void OnInvalidSubmit()
    {

        success = false;
    }

    private void Back()
    {

        Navigation.NavigateTo("/application/Insurance");

    }






}



